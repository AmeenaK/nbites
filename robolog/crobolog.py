# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _crobolog
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


LOG_TYPE_SINGLE = _crobolog.LOG_TYPE_SINGLE
LOG_TYPE_DOUBLE = _crobolog.LOG_TYPE_DOUBLE
LOG_TYPE_TRIPLE = _crobolog.LOG_TYPE_TRIPLE
LOG_TYPE_DUAL = _crobolog.LOG_TYPE_DUAL
IMAGE_TYPE_RAW = _crobolog.IMAGE_TYPE_RAW
IMAGE_TYPE_JPEG = _crobolog.IMAGE_TYPE_JPEG
IMAGE_TYPE_THRESH = _crobolog.IMAGE_TYPE_THRESH
class Image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _crobolog.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _crobolog.delete_Image
    __del__ = lambda self : None;
    def type(*args): return _crobolog.Image_type(*args)
    def width(*args): return _crobolog.Image_width(*args)
    def height(*args): return _crobolog.Image_height(*args)
    def size(*args): return _crobolog.Image_size(*args)
    def store(*args): return _crobolog.Image_store(*args)
    def storeRaw(*args): return _crobolog.Image_storeRaw(*args)
    __swig_getmethods__["load"] = lambda x: _crobolog.Image_load
    if _newclass:load = staticmethod(_crobolog.Image_load)
    __swig_getmethods__["fromString"] = lambda x: _crobolog.Image_fromString
    if _newclass:fromString = staticmethod(_crobolog.Image_fromString)
Image_swigregister = _crobolog.Image_swigregister
Image_swigregister(Image)
cvar = _crobolog.cvar
LOG_SIZE = cvar.LOG_SIZE
MAGIC_LEN = cvar.MAGIC_LEN
VISION_LOG_PLAIN = cvar.VISION_LOG_PLAIN
VISION_LOG_FULL = cvar.VISION_LOG_FULL
UNKNOWN_STRING = cvar.UNKNOWN_STRING
UNKNOWN_INT = cvar.UNKNOWN_INT
Image_load = _crobolog.Image_load
Image_fromString = _crobolog.Image_fromString

class RobotFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RobotFrame, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _crobolog.new_RobotFrame(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _crobolog.delete_RobotFrame
    __del__ = lambda self : None;
    def size(*args): return _crobolog.RobotFrame_size(*args)
    def frame(*args): return _crobolog.RobotFrame_frame(*args)
    def time(*args): return _crobolog.RobotFrame_time(*args)
    def image(*args): return _crobolog.RobotFrame_image(*args)
    def set_frame(*args): return _crobolog.RobotFrame_set_frame(*args)
    def set_time(*args): return _crobolog.RobotFrame_set_time(*args)
    def set_image(*args): return _crobolog.RobotFrame_set_image(*args)
    def store(*args): return _crobolog.RobotFrame_store(*args)
    __swig_getmethods__["load"] = lambda x: _crobolog.RobotFrame_load
    if _newclass:load = staticmethod(_crobolog.RobotFrame_load)
RobotFrame_swigregister = _crobolog.RobotFrame_swigregister
RobotFrame_swigregister(RobotFrame)
RobotFrame_load = _crobolog.RobotFrame_load

class VisionFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisionFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisionFrame, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _crobolog.delete_VisionFrame
    __del__ = lambda self : None;
    def size(*args): return _crobolog.VisionFrame_size(*args)
    def store(*args): return _crobolog.VisionFrame_store(*args)
    __swig_getmethods__["load"] = lambda x: _crobolog.VisionFrame_load
    if _newclass:load = staticmethod(_crobolog.VisionFrame_load)
VisionFrame_swigregister = _crobolog.VisionFrame_swigregister
VisionFrame_swigregister(VisionFrame)
VisionFrame_load = _crobolog.VisionFrame_load

class MindFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MindFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MindFrame, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _crobolog.new_MindFrame(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _crobolog.delete_MindFrame
    __del__ = lambda self : None;
    def player(*args): return _crobolog.MindFrame_player(*args)
    def playState(*args): return _crobolog.MindFrame_playState(*args)
    def set_player(*args): return _crobolog.MindFrame_set_player(*args)
    def set_playState(*args): return _crobolog.MindFrame_set_playState(*args)
    def size(*args): return _crobolog.MindFrame_size(*args)
    def store(*args): return _crobolog.MindFrame_store(*args)
    __swig_getmethods__["load"] = lambda x: _crobolog.MindFrame_load
    if _newclass:load = staticmethod(_crobolog.MindFrame_load)
MindFrame_swigregister = _crobolog.MindFrame_swigregister
MindFrame_swigregister(MindFrame)
MindFrame_load = _crobolog.MindFrame_load

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _crobolog.new_Log(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _crobolog.delete_Log
    __del__ = lambda self : None;
    def type(*args): return _crobolog.Log_type(*args)
    def length(*args): return _crobolog.Log_length(*args)
    def size(*args): return _crobolog.Log_size(*args)
    def clear(*args): return _crobolog.Log_clear(*args)
    def dogName(*args): return _crobolog.Log_dogName(*args)
    def calFile(*args): return _crobolog.Log_calFile(*args)
    def set_dogName(*args): return _crobolog.Log_set_dogName(*args)
    def set_calFile(*args): return _crobolog.Log_set_calFile(*args)
    def robotLog(*args): return _crobolog.Log_robotLog(*args)
    def visionLog(*args): return _crobolog.Log_visionLog(*args)
    def mindLog(*args): return _crobolog.Log_mindLog(*args)
    def robot(*args): return _crobolog.Log_robot(*args)
    def vision(*args): return _crobolog.Log_vision(*args)
    def mind(*args): return _crobolog.Log_mind(*args)
    def log(*args): return _crobolog.Log_log(*args)
    def store(*args): return _crobolog.Log_store(*args)
    __swig_getmethods__["load"] = lambda x: _crobolog.Log_load
    if _newclass:load = staticmethod(_crobolog.Log_load)
Log_swigregister = _crobolog.Log_swigregister
Log_swigregister(Log)
Log_load = _crobolog.Log_load



