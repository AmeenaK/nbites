// Generated by the protocol buffer compiler.  DO NOT EDIT!

package TOOL.Data;

public final class Classification {
  private Classification() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class KeyFrame extends
      com.google.protobuf.GeneratedMessage {
    // Use KeyFrame.newBuilder() to construct.
    private KeyFrame() {}
    
    private static final KeyFrame defaultInstance = new KeyFrame();
    public static KeyFrame getDefaultInstance() {
      return defaultInstance;
    }
    
    public KeyFrame getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TOOL.Data.Classification.internal_static_classification_KeyFrame_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TOOL.Data.Classification.internal_static_classification_KeyFrame_fieldAccessorTable;
    }
    
    public static enum GoalType
        implements com.google.protobuf.ProtocolMessageEnum {
      NO_POST(0, 0),
      RIGHT(1, 1),
      UNSURE(2, 2),
      BOTH(3, 3),
      LEFT(4, 4),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static GoalType valueOf(int value) {
        switch (value) {
          case 0: return NO_POST;
          case 1: return RIGHT;
          case 2: return UNSURE;
          case 3: return BOTH;
          case 4: return LEFT;
          default: return null;
        }
      }
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return TOOL.Data.Classification.KeyFrame.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final GoalType[] VALUES = {
        NO_POST, RIGHT, UNSURE, BOTH, LEFT, 
      };
      public static GoalType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private GoalType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        TOOL.Data.Classification.getDescriptor();
      }
    }
    
    public static enum CrossType
        implements com.google.protobuf.ProtocolMessageEnum {
      NO_CROSS(0, 0),
      YELLOW(1, 1),
      UNKNOWN(2, 2),
      DOUBLE_CROSS(3, 3),
      BLUE(4, 4),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static CrossType valueOf(int value) {
        switch (value) {
          case 0: return NO_CROSS;
          case 1: return YELLOW;
          case 2: return UNKNOWN;
          case 3: return DOUBLE_CROSS;
          case 4: return BLUE;
          default: return null;
        }
      }
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return TOOL.Data.Classification.KeyFrame.getDescriptor().getEnumTypes().get(1);
      }
      
      private static final CrossType[] VALUES = {
        NO_CROSS, YELLOW, UNKNOWN, DOUBLE_CROSS, BLUE, 
      };
      public static CrossType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private CrossType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        TOOL.Data.Classification.getDescriptor();
      }
    }
    
    // required bool humanChecked = 1;
    public static final int HUMANCHECKED_FIELD_NUMBER = 1;
    private boolean hasHumanChecked;
    private boolean humanChecked_ = false;
    public boolean hasHumanChecked() { return hasHumanChecked; }
    public boolean getHumanChecked() { return humanChecked_; }
    
    // required bool ball = 2;
    public static final int BALL_FIELD_NUMBER = 2;
    private boolean hasBall;
    private boolean ball_ = false;
    public boolean hasBall() { return hasBall; }
    public boolean getBall() { return ball_; }
    
    // optional .classification.KeyFrame.GoalType blueGoal = 3;
    public static final int BLUEGOAL_FIELD_NUMBER = 3;
    private boolean hasBlueGoal;
    private TOOL.Data.Classification.KeyFrame.GoalType blueGoal_ = TOOL.Data.Classification.KeyFrame.GoalType.NO_POST;
    public boolean hasBlueGoal() { return hasBlueGoal; }
    public TOOL.Data.Classification.KeyFrame.GoalType getBlueGoal() { return blueGoal_; }
    
    // optional .classification.KeyFrame.GoalType yellowGoal = 4;
    public static final int YELLOWGOAL_FIELD_NUMBER = 4;
    private boolean hasYellowGoal;
    private TOOL.Data.Classification.KeyFrame.GoalType yellowGoal_ = TOOL.Data.Classification.KeyFrame.GoalType.NO_POST;
    public boolean hasYellowGoal() { return hasYellowGoal; }
    public TOOL.Data.Classification.KeyFrame.GoalType getYellowGoal() { return yellowGoal_; }
    
    // optional .classification.KeyFrame.CrossType cross = 5;
    public static final int CROSS_FIELD_NUMBER = 5;
    private boolean hasCross;
    private TOOL.Data.Classification.KeyFrame.CrossType cross_ = TOOL.Data.Classification.KeyFrame.CrossType.NO_CROSS;
    public boolean hasCross() { return hasCross; }
    public TOOL.Data.Classification.KeyFrame.CrossType getCross() { return cross_; }
    
    // optional int32 redRobots = 6;
    public static final int REDROBOTS_FIELD_NUMBER = 6;
    private boolean hasRedRobots;
    private int redRobots_ = 0;
    public boolean hasRedRobots() { return hasRedRobots; }
    public int getRedRobots() { return redRobots_; }
    
    // optional int32 blueRobots = 7;
    public static final int BLUEROBOTS_FIELD_NUMBER = 7;
    private boolean hasBlueRobots;
    private int blueRobots_ = 0;
    public boolean hasBlueRobots() { return hasBlueRobots; }
    public int getBlueRobots() { return blueRobots_; }
    
    // optional int32 tCorners = 8;
    public static final int TCORNERS_FIELD_NUMBER = 8;
    private boolean hasTCorners;
    private int tCorners_ = 0;
    public boolean hasTCorners() { return hasTCorners; }
    public int getTCorners() { return tCorners_; }
    
    // optional int32 lCorners = 9;
    public static final int LCORNERS_FIELD_NUMBER = 9;
    private boolean hasLCorners;
    private int lCorners_ = 0;
    public boolean hasLCorners() { return hasLCorners; }
    public int getLCorners() { return lCorners_; }
    
    @Override
    public final boolean isInitialized() {
      if (!hasHumanChecked) return false;
      if (!hasBall) return false;
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasHumanChecked()) {
        output.writeBool(1, getHumanChecked());
      }
      if (hasBall()) {
        output.writeBool(2, getBall());
      }
      if (hasBlueGoal()) {
        output.writeEnum(3, getBlueGoal().getNumber());
      }
      if (hasYellowGoal()) {
        output.writeEnum(4, getYellowGoal().getNumber());
      }
      if (hasCross()) {
        output.writeEnum(5, getCross().getNumber());
      }
      if (hasRedRobots()) {
        output.writeInt32(6, getRedRobots());
      }
      if (hasBlueRobots()) {
        output.writeInt32(7, getBlueRobots());
      }
      if (hasTCorners()) {
        output.writeInt32(8, getTCorners());
      }
      if (hasLCorners()) {
        output.writeInt32(9, getLCorners());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    @Override
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasHumanChecked()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, getHumanChecked());
      }
      if (hasBall()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, getBall());
      }
      if (hasBlueGoal()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, getBlueGoal().getNumber());
      }
      if (hasYellowGoal()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, getYellowGoal().getNumber());
      }
      if (hasCross()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, getCross().getNumber());
      }
      if (hasRedRobots()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getRedRobots());
      }
      if (hasBlueRobots()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getBlueRobots());
      }
      if (hasTCorners()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getTCorners());
      }
      if (hasLCorners()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getLCorners());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static TOOL.Data.Classification.KeyFrame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static TOOL.Data.Classification.KeyFrame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static TOOL.Data.Classification.KeyFrame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static TOOL.Data.Classification.KeyFrame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static TOOL.Data.Classification.KeyFrame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static TOOL.Data.Classification.KeyFrame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static TOOL.Data.Classification.KeyFrame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static TOOL.Data.Classification.KeyFrame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static TOOL.Data.Classification.KeyFrame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static TOOL.Data.Classification.KeyFrame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(TOOL.Data.Classification.KeyFrame prototype) {
      return new Builder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using TOOL.Data.Classification.KeyFrame.newBuilder()
      private Builder() {}
      
      TOOL.Data.Classification.KeyFrame result = new TOOL.Data.Classification.KeyFrame();
      
      @Override
      protected TOOL.Data.Classification.KeyFrame internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new TOOL.Data.Classification.KeyFrame();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return TOOL.Data.Classification.KeyFrame.getDescriptor();
      }
      
      public TOOL.Data.Classification.KeyFrame getDefaultInstanceForType() {
        return TOOL.Data.Classification.KeyFrame.getDefaultInstance();
      }
      
      public TOOL.Data.Classification.KeyFrame build() {
        if (result != null && !isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private TOOL.Data.Classification.KeyFrame buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public TOOL.Data.Classification.KeyFrame buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");  }
        TOOL.Data.Classification.KeyFrame returnMe = result;
        result = null;
        return returnMe;
      }
      
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof TOOL.Data.Classification.KeyFrame) {
          return mergeFrom((TOOL.Data.Classification.KeyFrame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(TOOL.Data.Classification.KeyFrame other) {
        if (other == TOOL.Data.Classification.KeyFrame.getDefaultInstance()) return this;
        if (other.hasHumanChecked()) {
          setHumanChecked(other.getHumanChecked());
        }
        if (other.hasBall()) {
          setBall(other.getBall());
        }
        if (other.hasBlueGoal()) {
          setBlueGoal(other.getBlueGoal());
        }
        if (other.hasYellowGoal()) {
          setYellowGoal(other.getYellowGoal());
        }
        if (other.hasCross()) {
          setCross(other.getCross());
        }
        if (other.hasRedRobots()) {
          setRedRobots(other.getRedRobots());
        }
        if (other.hasBlueRobots()) {
          setBlueRobots(other.getBlueRobots());
        }
        if (other.hasTCorners()) {
          setTCorners(other.getTCorners());
        }
        if (other.hasLCorners()) {
          setLCorners(other.getLCorners());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return mergeFrom(input,
          com.google.protobuf.ExtensionRegistry.getEmptyRegistry());
      }
      
      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistry extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setHumanChecked(input.readBool());
              break;
            }
            case 16: {
              setBall(input.readBool());
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              TOOL.Data.Classification.KeyFrame.GoalType value = TOOL.Data.Classification.KeyFrame.GoalType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                setBlueGoal(value);
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              TOOL.Data.Classification.KeyFrame.GoalType value = TOOL.Data.Classification.KeyFrame.GoalType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                setYellowGoal(value);
              }
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              TOOL.Data.Classification.KeyFrame.CrossType value = TOOL.Data.Classification.KeyFrame.CrossType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                setCross(value);
              }
              break;
            }
            case 48: {
              setRedRobots(input.readInt32());
              break;
            }
            case 56: {
              setBlueRobots(input.readInt32());
              break;
            }
            case 64: {
              setTCorners(input.readInt32());
              break;
            }
            case 72: {
              setLCorners(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // required bool humanChecked = 1;
      public boolean hasHumanChecked() {
        return result.hasHumanChecked();
      }
      public boolean getHumanChecked() {
        return result.getHumanChecked();
      }
      public Builder setHumanChecked(boolean value) {
        result.hasHumanChecked = true;
        result.humanChecked_ = value;
        return this;
      }
      public Builder clearHumanChecked() {
        result.hasHumanChecked = false;
        result.humanChecked_ = false;
        return this;
      }
      
      // required bool ball = 2;
      public boolean hasBall() {
        return result.hasBall();
      }
      public boolean getBall() {
        return result.getBall();
      }
      public Builder setBall(boolean value) {
        result.hasBall = true;
        result.ball_ = value;
        return this;
      }
      public Builder clearBall() {
        result.hasBall = false;
        result.ball_ = false;
        return this;
      }
      
      // optional .classification.KeyFrame.GoalType blueGoal = 3;
      public boolean hasBlueGoal() {
        return result.hasBlueGoal();
      }
      public TOOL.Data.Classification.KeyFrame.GoalType getBlueGoal() {
        return result.getBlueGoal();
      }
      public Builder setBlueGoal(TOOL.Data.Classification.KeyFrame.GoalType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasBlueGoal = true;
        result.blueGoal_ = value;
        return this;
      }
      public Builder clearBlueGoal() {
        result.hasBlueGoal = false;
        result.blueGoal_ = TOOL.Data.Classification.KeyFrame.GoalType.NO_POST;
        return this;
      }
      
      // optional .classification.KeyFrame.GoalType yellowGoal = 4;
      public boolean hasYellowGoal() {
        return result.hasYellowGoal();
      }
      public TOOL.Data.Classification.KeyFrame.GoalType getYellowGoal() {
        return result.getYellowGoal();
      }
      public Builder setYellowGoal(TOOL.Data.Classification.KeyFrame.GoalType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasYellowGoal = true;
        result.yellowGoal_ = value;
        return this;
      }
      public Builder clearYellowGoal() {
        result.hasYellowGoal = false;
        result.yellowGoal_ = TOOL.Data.Classification.KeyFrame.GoalType.NO_POST;
        return this;
      }
      
      // optional .classification.KeyFrame.CrossType cross = 5;
      public boolean hasCross() {
        return result.hasCross();
      }
      public TOOL.Data.Classification.KeyFrame.CrossType getCross() {
        return result.getCross();
      }
      public Builder setCross(TOOL.Data.Classification.KeyFrame.CrossType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCross = true;
        result.cross_ = value;
        return this;
      }
      public Builder clearCross() {
        result.hasCross = false;
        result.cross_ = TOOL.Data.Classification.KeyFrame.CrossType.NO_CROSS;
        return this;
      }
      
      // optional int32 redRobots = 6;
      public boolean hasRedRobots() {
        return result.hasRedRobots();
      }
      public int getRedRobots() {
        return result.getRedRobots();
      }
      public Builder setRedRobots(int value) {
        result.hasRedRobots = true;
        result.redRobots_ = value;
        return this;
      }
      public Builder clearRedRobots() {
        result.hasRedRobots = false;
        result.redRobots_ = 0;
        return this;
      }
      
      // optional int32 blueRobots = 7;
      public boolean hasBlueRobots() {
        return result.hasBlueRobots();
      }
      public int getBlueRobots() {
        return result.getBlueRobots();
      }
      public Builder setBlueRobots(int value) {
        result.hasBlueRobots = true;
        result.blueRobots_ = value;
        return this;
      }
      public Builder clearBlueRobots() {
        result.hasBlueRobots = false;
        result.blueRobots_ = 0;
        return this;
      }
      
      // optional int32 tCorners = 8;
      public boolean hasTCorners() {
        return result.hasTCorners();
      }
      public int getTCorners() {
        return result.getTCorners();
      }
      public Builder setTCorners(int value) {
        result.hasTCorners = true;
        result.tCorners_ = value;
        return this;
      }
      public Builder clearTCorners() {
        result.hasTCorners = false;
        result.tCorners_ = 0;
        return this;
      }
      
      // optional int32 lCorners = 9;
      public boolean hasLCorners() {
        return result.hasLCorners();
      }
      public int getLCorners() {
        return result.getLCorners();
      }
      public Builder setLCorners(int value) {
        result.hasLCorners = true;
        result.lCorners_ = value;
        return this;
      }
      public Builder clearLCorners() {
        result.hasLCorners = false;
        result.lCorners_ = 0;
        return this;
      }
    }
    
    static {
      TOOL.Data.Classification.getDescriptor();
    }
  }
  
  public static final class Keys extends
      com.google.protobuf.GeneratedMessage {
    // Use Keys.newBuilder() to construct.
    private Keys() {}
    
    private static final Keys defaultInstance = new Keys();
    public static Keys getDefaultInstance() {
      return defaultInstance;
    }
    
    public Keys getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TOOL.Data.Classification.internal_static_classification_Keys_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TOOL.Data.Classification.internal_static_classification_Keys_fieldAccessorTable;
    }
    
    // repeated .classification.KeyFrame frame = 1;
    public static final int FRAME_FIELD_NUMBER = 1;
    private java.util.List<TOOL.Data.Classification.KeyFrame> frame_ =
      java.util.Collections.emptyList();
    public java.util.List<TOOL.Data.Classification.KeyFrame> getFrameList() {
      return frame_;
    }
    public int getFrameCount() { return frame_.size(); }
    public TOOL.Data.Classification.KeyFrame getFrame(int index) {
      return frame_.get(index);
    }
    
    @Override
    public final boolean isInitialized() {
      for (TOOL.Data.Classification.KeyFrame element : getFrameList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (TOOL.Data.Classification.KeyFrame element : getFrameList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    @Override
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (TOOL.Data.Classification.KeyFrame element : getFrameList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static TOOL.Data.Classification.Keys parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static TOOL.Data.Classification.Keys parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static TOOL.Data.Classification.Keys parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static TOOL.Data.Classification.Keys parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static TOOL.Data.Classification.Keys parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static TOOL.Data.Classification.Keys parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static TOOL.Data.Classification.Keys parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static TOOL.Data.Classification.Keys parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static TOOL.Data.Classification.Keys parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static TOOL.Data.Classification.Keys parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(TOOL.Data.Classification.Keys prototype) {
      return new Builder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using TOOL.Data.Classification.Keys.newBuilder()
      private Builder() {}
      
      TOOL.Data.Classification.Keys result = new TOOL.Data.Classification.Keys();
      
      @Override
      protected TOOL.Data.Classification.Keys internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new TOOL.Data.Classification.Keys();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return TOOL.Data.Classification.Keys.getDescriptor();
      }
      
      public TOOL.Data.Classification.Keys getDefaultInstanceForType() {
        return TOOL.Data.Classification.Keys.getDefaultInstance();
      }
      
      public TOOL.Data.Classification.Keys build() {
        if (result != null && !isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private TOOL.Data.Classification.Keys buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public TOOL.Data.Classification.Keys buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");  }
        if (result.frame_ != java.util.Collections.EMPTY_LIST) {
          result.frame_ =
            java.util.Collections.unmodifiableList(result.frame_);
        }
        TOOL.Data.Classification.Keys returnMe = result;
        result = null;
        return returnMe;
      }
      
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof TOOL.Data.Classification.Keys) {
          return mergeFrom((TOOL.Data.Classification.Keys)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(TOOL.Data.Classification.Keys other) {
        if (other == TOOL.Data.Classification.Keys.getDefaultInstance()) return this;
        if (!other.frame_.isEmpty()) {
          if (result.frame_.isEmpty()) {
            result.frame_ = new java.util.ArrayList<TOOL.Data.Classification.KeyFrame>();
          }
          result.frame_.addAll(other.frame_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return mergeFrom(input,
          com.google.protobuf.ExtensionRegistry.getEmptyRegistry());
      }
      
      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistry extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              TOOL.Data.Classification.KeyFrame.Builder subBuilder = TOOL.Data.Classification.KeyFrame.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addFrame(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .classification.KeyFrame frame = 1;
      public java.util.List<TOOL.Data.Classification.KeyFrame> getFrameList() {
        return java.util.Collections.unmodifiableList(result.frame_);
      }
      public int getFrameCount() {
        return result.getFrameCount();
      }
      public TOOL.Data.Classification.KeyFrame getFrame(int index) {
        return result.getFrame(index);
      }
      public Builder setFrame(int index, TOOL.Data.Classification.KeyFrame value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.frame_.set(index, value);
        return this;
      }
      public Builder setFrame(int index, TOOL.Data.Classification.KeyFrame.Builder builderForValue) {
        result.frame_.set(index, builderForValue.build());
        return this;
      }
      public Builder addFrame(TOOL.Data.Classification.KeyFrame value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.frame_.isEmpty()) {
          result.frame_ = new java.util.ArrayList<TOOL.Data.Classification.KeyFrame>();
        }
        result.frame_.add(value);
        return this;
      }
      public Builder addFrame(TOOL.Data.Classification.KeyFrame.Builder builderForValue) {
        if (result.frame_.isEmpty()) {
          result.frame_ = new java.util.ArrayList<TOOL.Data.Classification.KeyFrame>();
        }
        result.frame_.add(builderForValue.build());
        return this;
      }
      public Builder addAllFrame(
          java.lang.Iterable<? extends TOOL.Data.Classification.KeyFrame> values) {
        if (result.frame_.isEmpty()) {
          result.frame_ = new java.util.ArrayList<TOOL.Data.Classification.KeyFrame>();
        }
        super.addAll(values, result.frame_);
        return this;
      }
      public Builder clearFrame() {
        result.frame_ = java.util.Collections.emptyList();
        return this;
      }
    }
    
    static {
      TOOL.Data.Classification.getDescriptor();
    }
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_classification_KeyFrame_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_classification_KeyFrame_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_classification_Keys_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_classification_Keys_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String descriptorData =
      "\n\016Classify.proto\022\016classification\"\254\003\n\010Key" +
      "Frame\022\024\n\014humanChecked\030\001 \002(\010\022\014\n\004ball\030\002 \002(" +
      "\010\0223\n\010blueGoal\030\003 \001(\0162!.classification.Key" +
      "Frame.GoalType\0225\n\nyellowGoal\030\004 \001(\0162!.cla" +
      "ssification.KeyFrame.GoalType\0221\n\005cross\030\005" +
      " \001(\0162\".classification.KeyFrame.CrossType" +
      "\022\021\n\tredRobots\030\006 \001(\005\022\022\n\nblueRobots\030\007 \001(\005\022" +
      "\020\n\010tCorners\030\010 \001(\005\022\020\n\010lCorners\030\t \001(\005\"B\n\010G" +
      "oalType\022\013\n\007NO_POST\020\000\022\t\n\005RIGHT\020\001\022\n\n\006UNSUR" +
      "E\020\002\022\010\n\004BOTH\020\003\022\010\n\004LEFT\020\004\"N\n\tCrossType\022\014\n\010" +
      "NO_CROSS\020\000\022\n\n\006YELLOW\020\001\022\013\n\007UNKNOWN\020\002\022\020\n\014D" +
      "OUBLE_CROSS\020\003\022\010\n\004BLUE\020\004\"/\n\004Keys\022\'\n\005frame" +
      "\030\001 \003(\0132\030.classification.KeyFrameB\033\n\tTOOL" +
      ".DataB\016Classification";
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_classification_KeyFrame_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_classification_KeyFrame_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_classification_KeyFrame_descriptor,
              new java.lang.String[] { "HumanChecked", "Ball", "BlueGoal", "YellowGoal", "Cross", "RedRobots", "BlueRobots", "TCorners", "LCorners", },
              TOOL.Data.Classification.KeyFrame.class,
              TOOL.Data.Classification.KeyFrame.Builder.class);
          internal_static_classification_Keys_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_classification_Keys_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_classification_Keys_descriptor,
              new java.lang.String[] { "Frame", },
              TOOL.Data.Classification.Keys.class,
              TOOL.Data.Classification.Keys.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
}
